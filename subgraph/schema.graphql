enum Status {
  "The item is not registered on the List and there are no pending requests."
  absent
  "The item is registered and there are no pending requests."
  registered
  "The item is not registered on the List, but there is a pending registration request."
  registrationRequested
  "The item is registered on the List, but there is a pending removal request. These are sometimes also called removal requests."
  clearingRequested
}

enum Ruling {
  "The arbitrator did not rule or refused to rule."
  None
  "The arbitrator ruled in favor of the requester."
  Accept
  "The arbitrator in favor of the challenger."
  Reject
}

type MainCurate @entity {
  id: ID!
  address: Bytes!
}
type Arbitrator @entity {
  "The address of the arbitrator"
  id: ID!
}

type Counter @entity {
  id: ID!
  totalRegistries: BigInt!
  totalItems: BigInt!
  totalDeposits: BigInt!
  numberOfCurators: BigInt!
}

type User @entity {
  id: ID! # address
  registry: [Registry!]! @derivedFrom(field: "registerer")
  items: [Item!]! @derivedFrom(field: "registerer")
  requests: [Request!]! @derivedFrom(field: "requester")
  challenges: [Request!]! @derivedFrom(field: "challenger")
}

type Registry @entity {
  "The registry address"
  id: ID!
  "The items submitted to this list"
  items: [Item!]! @derivedFrom(field: "registry")
  "The requests submitted to this list"
  requests: [Request!]! @derivedFrom(field: "registry")
  "Connected List. Can be the 0 address. In practice, will never be null."
  connectedList: Bytes
  "The address that registered the curate"
  registerer: User!
  "Registry's Title"
  title: String
  "Registry's description"
  description: String
  "A link to registry's logo."
  logoURI: String
  "A link to file describing registry's policy."
  policyURI: String
  "Field to identify if a list is a 'List of Lists.'"
  isListOfLists: Boolean
  "Item name for a item in registry."
  itemName: String
  "Plural item name for items in registry."
  itemNamePlural: String
  "Stringified JSON data containing registry metadata"
  metadata: String
  "The parsed data describing the fields in Registry."
  fieldProps: [FieldProp!]! @derivedFrom(field: "registry")
  "The total number of items in the registry."
  totalItems: BigInt!
  "The total number of items in absent state."
  numberOfAbsent: BigInt!
  "The total number of items in registered state."
  numberOfRegistered: BigInt!
  "The total number of items in the registration requested or clearing requested state."
  numberOfPending: BigInt!
  "The total number of items disputed"
  numberOfDisputed: BigInt!
}

type Item @entity {
  "The id of the item in the subgraph entity. Format: <itemID>@<listaddress_lowercase>"
  id: ID!
  "The ID of the item in the registry. Also the keccak256 hash of the data."
  itemID: Bytes!
  "The data describing the item."
  data: String!
  "The parsed data describing the item."
  props: [ItemProp!]! @derivedFrom(field: "item")
  "First indexable value of the json file."
  key0: String
  "Second indexable value of the json file."
  key1: String
  "Third indexable value of the json file."
  key2: String
  "Fourth indexable value of the json file."
  key3: String
  "Fifth indexable value of the json file."
  key4: String
  "The item identifiers combined as a single string."
  keywords: String
  "The current status of the item."
  status: Status!
  "List of status change requests made for the item in the form requests[requestID]."
  requests: [Request!]! @derivedFrom(field: "item")
  "The total number of requests for this item."
  numberOfRequests: BigInt!
  "The registry where this item was submitted."
  registry: Registry!
  "The address of the registry this item was submitted. Redundant with registry field to allow use in conditionals."
  registryAddress: Bytes!
  "Time when the latest request was made."
  latestRequestSubmissionTime: BigInt!
  "The time the latest request was resolved."
  latestRequestResolutionTime: BigInt!
  "Whether the item is currently disputed."
  disputed: Boolean!
  "The account that made the latest request to the item."
  latestRequester: User
  "The account that challenged the latest request, if any."
  latestChallenger: User
  "The user that requested the first request / registration"
  registerer: User!
}

type _Schema_
  @fulltext(
    name: "itemSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Item", fields: [{ name: "keywords" }] }]
  )

type ItemProp @entity {
  id: ID!
  type: String!
  label: String!
  description: String!
  isIdentifier: Boolean!
  value: String
  item: Item!
}

type FieldProp @entity {
  id: ID!
  position: BigInt!
  type: String!
  label: String!
  description: String!
  isIdentifier: Boolean!
  registry: Registry!
}

type Request @entity {
  "The item ID (which is the keccak256 hash of its data)."
  id: ID!
  "True if a dispute was raised."
  disputed: Boolean!
  "ID of the dispute, if any."
  disputeID: BigInt
  "External Dispute ID of the dispute, if any."
  externalDisputeID: BigInt
  "Time when the request was made. Used to track when the challenge period ends."
  submissionTime: BigInt!
  "True if the request was executed and/or any raised disputes were resolved."
  resolved: Boolean!
  "The party that made a request"
  requester: User!
  "The party that challenged the request"
  challenger: User
  "The arbitrator trusted to solve disputes for this request."
  arbitrator: Bytes!
  "The extra data for the trusted arbitrator of this request."
  arbitratorExtraData: Bytes!
  "The deposit that would be awarded to the challenger if challenge is successful"
  deposit: BigInt!
  "The outcome of the dispute, if any. Note that unsuccessful appeal fundings can invert the arbitrator ruling (so this may differ from the ruling given by the arbitrator)."
  disputeOutcome: Ruling!
  "Whether it was requested to add or remove the item to/from the list."
  requestType: Status!
  "The item this request belongs to."
  item: Item!
  "The registry where this request was submitted."
  registry: Registry!
  "The address of the registry this item was submitted. Redundant with registry field to allow use in conditionals."
  registryAddress: Bytes!
  "The time the request was resolved."
  resolutionTime: BigInt!
  "Only set if the request was settled by a dispute. Used by the twitter bot"
  finalRuling: BigInt
  "The hash of the transaction that created this request."
  creationTx: Bytes!
  "The hash of the transaction that solved this request."
  resolutionTx: Bytes
}
