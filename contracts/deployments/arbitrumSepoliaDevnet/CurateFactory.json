{
  "address": "0x6f824A72d67bcF76f6F55C12F6E8FcAF531818bD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_curate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CurateV2",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "NewList",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "contract EvidenceModule",
          "name": "_evidenceModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_connectedList",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "templateRegistry",
              "type": "address"
            },
            {
              "internalType": "string[2]",
              "name": "registrationTemplateParameters",
              "type": "string[2]"
            },
            {
              "internalType": "string[2]",
              "name": "removalTemplateParameters",
              "type": "string[2]"
            }
          ],
          "internalType": "struct CurateV2.TemplateRegistryParams",
          "name": "_templateRegistryParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256[4]",
          "name": "_baseDeposits",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriodDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relayerContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_listMetadata",
          "type": "string"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "instances",
      "outputs": [
        {
          "internalType": "contract CurateV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a5577465d50003ca872cb8a67269b4b0bfc5730c8fe1735eb4dff7da5d6161f",
  "receipt": {
    "to": null,
    "from": "0xf1C7c037891525E360C59f708739Ac09A7670c59",
    "contractAddress": "0x6f824A72d67bcF76f6F55C12F6E8FcAF531818bD",
    "transactionIndex": 3,
    "gasUsed": "514910",
    "logsBloom": "0x
    "blockHash": "0x14b8bd078212b1afb8439c0346fa4506425b05f62e63c9c7985cf6d34ccc7ed3",
    "transactionHash": "0x4a5577465d50003ca872cb8a67269b4b0bfc5730c8fe1735eb4dff7da5d6161f",
    "logs": [],
    "blockNumber": 143682381,
    "cumulativeGasUsed": "793084",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xed1f06a9963D2B2D5f2176b2dFFaaf03FC909531"
  ],
  "numDeployments": 2,
  "solcInputHash": "43d22c659b0bfc53d1499e270ad9a93b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CurateV2\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewList\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"contract EvidenceModule\",\"name\":\"_evidenceModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_connectedList\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"templateRegistry\",\"type\":\"address\"},{\"internalType\":\"string[2]\",\"name\":\"registrationTemplateParameters\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"removalTemplateParameters\",\"type\":\"string[2]\"}],\"internalType\":\"struct CurateV2.TemplateRegistryParams\",\"name\":\"_templateRegistryParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256[4]\",\"name\":\"_baseDeposits\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relayerContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_listMetadata\",\"type\":\"string\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"contract CurateV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"NewList(address)\":{\"details\":\"Emitted when a new Curate contract is deployed using this factory.\",\"params\":{\"_address\":\"The address of the newly deployed Curate contract.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_curate\":\"Address of the Curate contract that is going to be used for each new deployment.\"}},\"count()\":{\"returns\":{\"_0\":\"The number of deployed Curate contracts using this factory.\"}},\"deploy(address,address,bytes,address,address,(address,string[2],string[2]),uint256[4],uint256,address,string)\":{\"details\":\"Deploy the arbitrable curated registry.\",\"params\":{\"_arbitrator\":\"Arbitrator to resolve potential disputes. The arbitrator is trusted to support appeal periods and not reenter.\",\"_arbitratorExtraData\":\"Extra data for the trusted arbitrator contract.\",\"_baseDeposits\":\"The base deposits for requests/challenges as follows: - The base deposit to submit an item. - The base deposit to remove an item. - The base deposit to challenge a submission. - The base deposit to challenge a removal request.\",\"_challengePeriodDuration\":\"The time in seconds parties have to challenge a request.\",\"_connectedList\":\"The address of the Curate contract that stores related Curate addresses. This parameter can be left empty.\",\"_evidenceModule\":\"The evidence contract for the arbitrator.\",\"_governor\":\"The trusted governor of this contract.\",\"_listMetadata\":\"Stringified JSON object containing list metadata (title, description, isListOfLists, etc.). Example at :-  https://cloudflare-ipfs.com/ipfs/QmekLsbXtQfm2jJjdeC5TF1cJcr5qxarZ9bhKmCS9s3ebK/list-metadata.json\",\"_relayerContract\":\"The address of the relay contract to add/remove items directly.\",\"_templateRegistryParams\":\"The dispute template registry. - templateRegistry : The dispute template registry. - registrationTemplateParameters : Template and data mappings json for registration requests. - removalTemplateParameters : Template and data mappings json for removal requests.\"}}},\"title\":\"CurateFactory This contract acts as a registry for Curate instances.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CurateFactory.sol\":\"CurateFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@kleros/kleros-v2-contracts/arbitration/evidence/EvidenceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"../interfaces/IArbitratorV2.sol\\\";\\nimport \\\"../interfaces/IEvidence.sol\\\";\\nimport \\\"../../proxy/UUPSProxiable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/// @title Evidence Module\\ncontract EvidenceModule is IEvidence, Initializable, UUPSProxiable {\\n    string public constant override version = \\\"0.8.0\\\";\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    address public governor; // The governor of the contract.\\n\\n    // ************************************* //\\n    // *              Modifiers            * //\\n    // ************************************* //\\n\\n    modifier onlyByGovernor() {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        _;\\n    }\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Initializer.\\n    /// @param _governor The governor's address.\\n    function initialize(address _governor) external reinitializer(1) {\\n        governor = _governor;\\n    }\\n\\n    function initialize2() external reinitializer(2) {\\n        // NOP\\n    }\\n\\n    // ************************ //\\n    // *      Governance      * //\\n    // ************************ //\\n\\n    /**\\n     * @dev Access Control to perform implementation upgrades (UUPS Proxiable)\\n     * @dev Only the governor can perform upgrades (`onlyByGovernor`)\\n     */\\n    function _authorizeUpgrade(address) internal view override onlyByGovernor {\\n        // NOP\\n    }\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    /// @dev Submits evidence for a dispute.\\n    /// @param _externalDisputeID Unique identifier for this dispute outside Kleros. It's the submitter responsability to submit the right evidence group ID.\\n    /// @param _evidence Stringified evidence object, example: '{\\\"name\\\" : \\\"Justification\\\", \\\"description\\\" : \\\"Description\\\", \\\"fileURI\\\" : \\\"/ipfs/QmWQV5ZFFhEJiW8Lm7ay2zLxC2XS4wx1b2W7FfdrLMyQQc\\\"}'.\\n    function submitEvidence(uint256 _externalDisputeID, string calldata _evidence) external {\\n        emit Evidence(_externalDisputeID, msg.sender, _evidence);\\n    }\\n}\\n\",\"keccak256\":\"0xedf978718e5d349c5a39747e2c4da253a1d8b73588c4118b74b39c324ba471fe\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitrableV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"./IArbitratorV2.sol\\\";\\n\\n/// @title IArbitrableV2\\n/// @notice Arbitrable interface.\\n/// @dev When developing arbitrable contracts, we need to:\\n/// - Define the action taken when a ruling is received by the contract.\\n/// - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\ninterface IArbitrableV2 {\\n    /// @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitratorDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _externalDisputeID An identifier created outside Kleros by the protocol requesting arbitration.\\n    /// @param _templateId The identifier of the dispute template. Should not be used with _templateUri.\\n    /// @param _templateUri The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId.\\n    event DisputeRequest(\\n        IArbitratorV2 indexed _arbitrator,\\n        uint256 indexed _arbitratorDisputeID,\\n        uint256 _externalDisputeID,\\n        uint256 _templateId,\\n        string _templateUri\\n    );\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrator The arbitrator giving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitratorV2 indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Give a ruling for a dispute.\\n    ///      Must be called by the arbitrator.\\n    ///      The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator.\\n    /// Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0xe841a4fe8ec109ce17dde4457bf1583c8b499109b05887c53a49a3207fc6e80b\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitratorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IArbitrableV2.sol\\\";\\n\\n/// @title Arbitrator\\n/// Arbitrator interface that implements the new arbitration standard.\\n/// Unlike the ERC-792 this standard is not concerned with appeals, so each arbitrator can implement an appeal system that suits it the most.\\n/// When developing arbitrator contracts we need to:\\n/// - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n/// - Define the functions for cost display (arbitrationCost).\\n/// - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\ninterface IArbitratorV2 {\\n    /// @dev To be emitted when a dispute is created.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _arbitrable The contract which created the dispute.\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrableV2 indexed _arbitrable);\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrable The arbitrable receiving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrableV2 indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev To be emitted when an ERC20 token is added or removed as a method to pay fees.\\n    /// @param _token The ERC20 token.\\n    /// @param _accepted Whether the token is accepted or not.\\n    event AcceptedFeeToken(IERC20 indexed _token, bool indexed _accepted);\\n\\n    /// @dev To be emitted when the fee for a particular ERC20 token is updated.\\n    /// @param _feeToken The ERC20 token.\\n    /// @param _rateInEth The new rate of the fee token in ETH.\\n    /// @param _rateDecimals The new decimals of the fee token rate.\\n    event NewCurrencyRate(IERC20 indexed _feeToken, uint64 _rateInEth, uint8 _rateDecimals);\\n\\n    /// @dev Create a dispute and pay for the fees in the native currency, typically ETH.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData\\n    ) external payable returns (uint256 disputeID);\\n\\n    /// @dev Create a dispute and pay for the fees in a supported ERC20 token.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @param _feeAmount Amount of the ERC20 token used to pay fees.\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData,\\n        IERC20 _feeToken,\\n        uint256 _feeAmount\\n    ) external returns (uint256 disputeID);\\n\\n    /// @dev Compute the cost of arbitration denominated in the native currency, typically ETH.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return cost The arbitration cost in ETH.\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /// @dev Compute the cost of arbitration denominated in `_feeToken`.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @return cost The arbitration cost in `_feeToken`.\\n    function arbitrationCost(bytes calldata _extraData, IERC20 _feeToken) external view returns (uint256 cost);\\n\\n    /// @dev Gets the current ruling of a specified dispute.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return ruling The current ruling.\\n    /// @return tied Whether it's a tie or not.\\n    /// @return overridden Whether the ruling was overridden by appeal funding or not.\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling, bool tied, bool overridden);\\n}\\n\",\"keccak256\":\"0xa4dc6b958197adead238de4246cd04e7389c3dc1b9f968acd10985f8fc5b74cf\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/arbitration/interfaces/IDisputeTemplateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\n/// @title IDisputeTemplate\\n/// @notice Dispute Template interface.\\ninterface IDisputeTemplateRegistry {\\n    /// @dev To be emitted when a new dispute template is created.\\n    /// @param _templateId The identifier of the dispute template.\\n    /// @param _templateTag An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\\n    /// @param _templateData The template data.\\n    /// @param _templateDataMappings The data mappings.\\n    event DisputeTemplate(\\n        uint256 indexed _templateId,\\n        string indexed _templateTag,\\n        string _templateData,\\n        string _templateDataMappings\\n    );\\n\\n    function setDisputeTemplate(\\n        string memory _templateTag,\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external returns (uint256 templateId);\\n}\\n\",\"keccak256\":\"0xb46ff71c32a524a865fe8ca99d94c9daeb690bc9d7d49d963a45b06f60af19f3\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/arbitration/interfaces/IEvidence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\n/// @title IEvidence\\ninterface IEvidence {\\n    /// @dev To be raised when evidence is submitted. Should point to the resource (evidences are not to be stored on chain due to gas considerations).\\n    /// @param _externalDisputeID Unique identifier for this dispute outside Kleros. It's the submitter responsability to submit the right external dispute ID.\\n    /// @param _party The address of the party submiting the evidence. Note that 0x0 refers to evidence not submitted by any party.\\n    /// @param _evidence Stringified evidence object, example: '{\\\"name\\\" : \\\"Justification\\\", \\\"description\\\" : \\\"Description\\\", \\\"fileURI\\\" : \\\"/ipfs/QmWQV5ZFFhEJiW8Lm7ay2zLxC2XS4wx1b2W7FfdrLMyQQc\\\"}'.\\n    event Evidence(uint256 indexed _externalDisputeID, address indexed _party, string _evidence);\\n}\\n\",\"keccak256\":\"0xa881a6604ffe43044edee5a789363e19b78af854092fe1e322d75a140150714c\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol) <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/proxy/utils/Initializable.sol>\\n\\npragma solidity 0.8.24;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to the proxy constructor\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1))\\n    bytes32 private constant _INITIALIZABLE_STORAGE =\\n        0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error AlreadyInitialized();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n        if (!(isTopLevelCall && initialized < 1) && !(address(this).code.length == 0 && initialized == 1)) {\\n            revert AlreadyInitialized();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert AlreadyInitialized();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert AlreadyInitialized();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := _INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x560ea64115636ecd6b3596248817125551c038ce1648019fde3cbe02d9759a30\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/proxy/UUPSProxiable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\n/// @title UUPS Proxiable\\n/// @author Simon Malatrait <simon.malatrait@grenoble-inp.org>\\n/// @dev This contract implements an upgradeability mechanism designed for UUPS proxies.\\n/// @dev Adapted from <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/proxy/utils/UUPSUpgradeable.sol>\\n/// The functions included here can perform an upgrade of an UUPS Proxy, when this contract is set as the implementation behind such a proxy.\\n///\\n/// IMPORTANT: A UUPS proxy requires its upgradeability functions to be in the implementation as opposed to the transparent proxy.\\n/// This means that if the proxy is upgraded to an implementation that does not support this interface, it will no longer be upgradeable.\\n///\\n/// A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n/// reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n/// `UUPSProxiable` with a custom implementation of upgrades.\\n///\\n/// The `_authorizeUpgrade` function must be overridden to include access restriction to the upgrade mechanism.\\nabstract contract UUPSProxiable {\\n    // ************************************* //\\n    // *             Event                 * //\\n    // ************************************* //\\n\\n    /// @dev Emitted when the `implementation` has been successfully upgraded.\\n    /// @param newImplementation Address of the new implementation the proxy is now forwarding calls to.\\n    event Upgraded(address indexed newImplementation);\\n\\n    // ************************************* //\\n    // *             Error                 * //\\n    // ************************************* //\\n\\n    /// @dev The call is from an unauthorized context.\\n    error UUPSUnauthorizedCallContext();\\n\\n    /// @dev The storage `slot` is unsupported as a UUID.\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /// @dev The `implementation` is not UUPS-compliant\\n    error InvalidImplementation(address implementation);\\n\\n    /// Failed Delegated call\\n    error FailedDelegateCall();\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    /// @dev Storage slot with the address of the current implementation.\\n    /// @dev This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n    /// @dev validated in the constructor.\\n    /// @dev NOTE: bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @dev Storage variable of the proxiable contract address.\\n    /// @dev It is used to check whether or not the current call is from the proxy.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    // ************************************* //\\n    // *             Governance            * //\\n    // ************************************* //\\n\\n    /// @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract.\\n    /// @dev Called by {upgradeToAndCall}.\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Upgrade mechanism including access control and UUPS-compliance.\\n    /// @param newImplementation Address of the new implementation contract.\\n    /// @param data Data used in a delegate call to `newImplementation` if non-empty. This will typically be an encoded\\n    /// function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n    /// @dev Reverts if the execution is not performed via delegatecall or the execution\\n    /// context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n\\n        // Check that the execution is being performed through a delegatecall call and that the execution context is\\n        // a proxy contract with an implementation (as defined in ERC1967) pointing to self.\\n        if (address(this) == __self || _getImplementation() != __self) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n\\n        try UUPSProxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            // Store the new implementation address to the implementation storage slot.\\n            assembly {\\n                sstore(IMPLEMENTATION_SLOT, newImplementation)\\n            }\\n            emit Upgraded(newImplementation);\\n\\n            if (data.length != 0) {\\n                // The return data is not checked (checking, in case of success, that the newImplementation code is non-empty if the return data is empty) because the authorized callee is trusted.\\n                /// @custom:oz-upgrades-unsafe-allow delegatecall\\n                (bool success, ) = newImplementation.delegatecall(data);\\n                if (!success) {\\n                    revert FailedDelegateCall();\\n                }\\n            }\\n        } catch {\\n            revert InvalidImplementation(newImplementation);\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @dev Implementation of the ERC1822 `proxiableUUID` function. This returns the storage slot used by the\\n    /// implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n    ///\\n    /// IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n    /// bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n    /// function revert if invoked through a proxy. This is guaranteed by the if statement.\\n    function proxiableUUID() external view virtual returns (bytes32) {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n        return IMPLEMENTATION_SLOT;\\n    }\\n\\n    /// @dev Returns the version of the implementation.\\n    /// @return Version string.\\n    function version() external view virtual returns (string memory);\\n\\n    // ************************************* //\\n    // *           Internal Views          * //\\n    // ************************************* //\\n\\n    function _getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8bb02ed2b2fc165296226762299c2ee3328f2a0c6e90c6fe7029fa5b01d0b60\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"src/CurateFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@mtsalenc, @unknownunknown1]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.24;\\n\\nimport {CurateV2, IArbitratorV2, EvidenceModule} from \\\"./CurateV2.sol\\\";\\n\\n/// @title CurateFactory\\n/// This contract acts as a registry for Curate instances.\\ncontract CurateFactory {\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @dev Emitted when a new Curate contract is deployed using this factory.\\n    /// @param _address The address of the newly deployed Curate contract.\\n    event NewList(CurateV2 indexed _address);\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    CurateV2[] public instances;\\n    address public curate;\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    /// @dev Constructor.\\n    /// @param _curate Address of the Curate contract that is going to be used for each new deployment.\\n    constructor(address _curate) {\\n        curate = _curate;\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Deploy the arbitrable curated registry.\\n    /// @param _governor The trusted governor of this contract.\\n    /// @param _arbitrator Arbitrator to resolve potential disputes. The arbitrator is trusted to support appeal periods and not reenter.\\n    /// @param _arbitratorExtraData Extra data for the trusted arbitrator contract.\\n    /// @param _evidenceModule The evidence contract for the arbitrator.\\n    /// @param _connectedList The address of the Curate contract that stores related Curate addresses. This parameter can be left empty.\\n    /// @param _templateRegistryParams The dispute template registry.\\n    /// - templateRegistry : The dispute template registry.\\n    /// - registrationTemplateParameters : Template and data mappings json for registration requests.\\n    /// - removalTemplateParameters : Template and data mappings json for removal requests.\\n    /// @param _baseDeposits The base deposits for requests/challenges as follows:\\n    /// - The base deposit to submit an item.\\n    /// - The base deposit to remove an item.\\n    /// - The base deposit to challenge a submission.\\n    /// - The base deposit to challenge a removal request.\\n    /// @param _challengePeriodDuration The time in seconds parties have to challenge a request.\\n    /// @param _relayerContract The address of the relay contract to add/remove items directly.\\n    /// @param _listMetadata Stringified JSON object containing list metadata (title, description, isListOfLists, etc.). Example at :-  https://cloudflare-ipfs.com/ipfs/QmekLsbXtQfm2jJjdeC5TF1cJcr5qxarZ9bhKmCS9s3ebK/list-metadata.json\\n    function deploy(\\n        address _governor,\\n        IArbitratorV2 _arbitrator,\\n        bytes calldata _arbitratorExtraData,\\n        EvidenceModule _evidenceModule,\\n        address _connectedList,\\n        CurateV2.TemplateRegistryParams calldata _templateRegistryParams,\\n        uint256[4] calldata _baseDeposits,\\n        uint256 _challengePeriodDuration,\\n        address _relayerContract,\\n        string memory _listMetadata\\n    ) public {\\n        CurateV2 instance = clone(curate);\\n        instance.initialize(\\n            _governor,\\n            _arbitrator,\\n            _arbitratorExtraData,\\n            _evidenceModule,\\n            _connectedList,\\n            CurateV2.TemplateRegistryParams(\\n                _templateRegistryParams.templateRegistry,\\n                _templateRegistryParams.registrationTemplateParameters,\\n                _templateRegistryParams.removalTemplateParameters\\n            ),\\n            _baseDeposits,\\n            _challengePeriodDuration,\\n            _relayerContract,\\n            _listMetadata\\n        );\\n        instances.push(instance);\\n        emit NewList(instance);\\n    }\\n\\n    /// @notice Adaptation of https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol.\\n    /// @dev Deploys and returns the address of a clone that mimics the behaviour of `curate`.\\n    /// @param _implementation Address of the contract to clone.\\n    /// This function uses the create opcode, which should never revert.\\n    function clone(address _implementation) internal returns (CurateV2 instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `_implementation` word, then packs the first 3 bytes\\n            // of the `_implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, _implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `_implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, _implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != CurateV2(address(0)), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @return The number of deployed Curate contracts using this factory.\\n    function count() external view returns (uint256) {\\n        return instances.length;\\n    }\\n}\\n\",\"keccak256\":\"0x52a539b8fe3827d37372307af4672dd637d83930decd6c2e00166dd466789b04\",\"license\":\"MIT\"},\"src/CurateV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@unknownunknown1, @mtsalenc, @hbarcelos]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.24;\\n\\nimport {IArbitrableV2, IArbitratorV2} from \\\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitrableV2.sol\\\";\\nimport {EvidenceModule} from \\\"@kleros/kleros-v2-contracts/arbitration/evidence/EvidenceModule.sol\\\";\\nimport \\\"@kleros/kleros-v2-contracts/arbitration/interfaces/IDisputeTemplateRegistry.sol\\\";\\n\\n/// @title Curate\\n/// Curated registry contract compatible with V2. The V1 version is here https://github.com/kleros/tcr/blob/master/contracts/LightGeneralizedTCR.sol\\ncontract CurateV2 is IArbitrableV2 {\\n    // ************************************* //\\n    // *         Enums / Structs           * //\\n    // ************************************* //\\n\\n    enum Status {\\n        Absent, // The item is not in the registry.\\n        Registered, // The item is in the registry.\\n        RegistrationRequested, // The item has a request to be added to the registry.\\n        ClearingRequested // The item has a request to be removed from the registry.\\n    }\\n\\n    enum Party {\\n        None, // Party per default when there is no challenger or requester. Also used for unconclusive ruling.\\n        Requester, // Party that made the request to change a status.\\n        Challenger // Party that challenges the request to change a status.\\n    }\\n\\n    enum RequestType {\\n        Registration, // Identifies a request to register an item to the registry.\\n        Clearing // Identifies a request to remove an item from the registry.\\n    }\\n\\n    enum DisputeStatus {\\n        None, // No dispute was created.\\n        AwaitingRuling, // Dispute was created, but the final ruling was not given yet.\\n        Resolved // Dispute was ruled.\\n    }\\n\\n    struct Item {\\n        Status status; // The current status of the item.\\n        uint256 sumDeposit; // The total deposit made by the requester and the challenger (if any).\\n        uint256 requestCount; // The number of requests.\\n        mapping(uint256 => Request) requests; // List of status change requests made for the item in the form requests[requestID].\\n    }\\n\\n    struct Request {\\n        RequestType requestType;\\n        uint64 submissionTime; // Time when the request was made. Used to track when the challenge period ends.\\n        uint24 arbitrationParamsIndex; // The index for the arbitration params for the request.\\n        address payable requester; // Address of the requester.\\n        // Pack the requester together with the other parameters, as they are written in the same request.\\n        address payable challenger; // Address of the challenger, if any.\\n        // TODO: store templateRegistry in case it's changed?\\n    }\\n\\n    struct DisputeData {\\n        uint256 disputeID; // The ID of the dispute on the arbitrator.\\n        DisputeStatus status; // The current status of the dispute.\\n        Party ruling; // The ruling given to a dispute.\\n    }\\n\\n    struct ArbitrationParams {\\n        IArbitratorV2 arbitrator; // The arbitrator trusted to solve disputes for this request.\\n        bytes arbitratorExtraData; // The extra data for the trusted arbitrator of this request.\\n        EvidenceModule evidenceModule; // The evidence module for the arbitrator.\\n    }\\n\\n    struct TemplateRegistryParams {\\n        address templateRegistry; // Dispute Template registry address\\n        string[2] registrationTemplateParameters; // Template and data mappings json for registration requests.\\n        string[2] removalTemplateParameters; // Template and data mappings json for removal requests.\\n    }\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    bool private initialized;\\n    uint256 public constant RULING_OPTIONS = 2; // The amount of non 0 choices the arbitrator can give.\\n    address public relayerContract; // The contract that is used to add or remove items directly to speed up the interchain communication.\\n    address public governor; // The address that can make changes to the parameters of the contract.\\n    IDisputeTemplateRegistry public templateRegistry; // The dispute template registry.\\n    uint256 public templateIdRegistration; // The current dispute template identifier for registration requests.\\n    uint256 public templateIdRemoval; // The current dispute template identifier for removal requests.\\n    uint256 public submissionBaseDeposit; // The base deposit to submit an item.\\n    uint256 public removalBaseDeposit; // The base deposit to remove an item.\\n    uint256 public submissionChallengeBaseDeposit; // The base deposit to challenge a submission.\\n    uint256 public removalChallengeBaseDeposit; // The base deposit to challenge a removal request.\\n    uint256 public challengePeriodDuration; // The time after which a request becomes executable if not challenged.\\n\\n    mapping(bytes32 => Item) public items; // Maps the item ID to its data in the form items[_itemID].\\n    mapping(address => mapping(uint256 => bytes32)) public arbitratorDisputeIDToItemID; // Maps a dispute ID to the ID of the item with the disputed request in the form arbitratorDisputeIDToItemID[arbitrator][disputeID].\\n    mapping(bytes32 => mapping(uint256 => DisputeData)) public requestsDisputeData; // Maps an item and a request to the data of the dispute related to them. requestsDisputeData[itemID][requestIndex]\\n    ArbitrationParams[] public arbitrationParamsChanges;\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"The caller must be the governor.\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelayer() {\\n        require(msg.sender == relayerContract, \\\"The caller must be the relay.\\\");\\n        _;\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @dev Emitted when a party makes a request, raises a dispute or when a request is resolved.\\n    /// @param _itemID The ID of the affected item.\\n    /// @param _updatedDirectly Whether this was emitted in either `addItemDirectly` or `removeItemDirectly`. This is used in the subgraph.\\n    event ItemStatusChange(bytes32 indexed _itemID, bool _updatedDirectly);\\n\\n    /// @dev Emitted when someone submits an item for the first time.\\n    /// @param _itemID The ID of the new item.\\n    /// @param _data Stringified JSON Object containing item data. Example at :- https://cloudflare-ipfs.com/ipfs/QmTypFX9416z5V87Fsnf6A89rrskh2X8BSVdaKhwzXNiDb/item.json.\\n    /// @param _addedDirectly Whether the item was added via `addItemDirectly`.\\n    event NewItem(bytes32 indexed _itemID, string _data, bool _addedDirectly);\\n\\n    /// @dev Emitted when someone submits a request.\\n    /// @param _itemID The ID of the affected item.\\n    /// @param _requestID Unique dispute identifier within this contract.\\n    event RequestSubmitted(bytes32 indexed _itemID, uint256 _requestID);\\n\\n    /// @dev Emitted when the address of the connected Curate contract is set. The Curate is an instance of the Curate contract where each item is the address of a Curate contract related to this one.\\n    /// @param _connectedList The address of the connected Curate.\\n    event ConnectedListSet(address indexed _connectedList);\\n\\n    /// @dev Emitted when the list metadata ipfs uri is updated.\\n    /// @param _listMetadata Ipfs uri to list metadata.\\n    event ListMetadataSet(string _listMetadata);\\n\\n    // ************************************* //\\n    // *            Initializer            * //\\n    // ************************************* //\\n\\n    /// @dev Initialize the arbitrable curated registry.\\n    /// @param _governor The trusted governor of this contract.\\n    /// @param _arbitrator Arbitrator to resolve potential disputes. The arbitrator is trusted to support appeal periods and not reenter.\\n    /// @param _arbitratorExtraData Extra data for the trusted arbitrator contract.\\n    /// @param _evidenceModule The evidence contract for the arbitrator.\\n    /// @param _connectedList The address of the Curate contract that stores related Curate addresses. This parameter can be left empty.\\n    /// @param _templateRegistryParams The dispute template registry.\\n    /// - templateRegistry : The dispute template registry.\\n    /// - registrationTemplateParameters : Template and data mappings json for registration requests.\\n    /// - removalTemplateParameters : Template and data mappings json for removal requests.\\n    /// @param _baseDeposits The base deposits for requests/challenges as follows:\\n    /// - The base deposit to submit an item.\\n    /// - The base deposit to remove an item.\\n    /// - The base deposit to challenge a submission.\\n    /// - The base deposit to challenge a removal request.\\n    /// @param _challengePeriodDuration The time in seconds parties have to challenge a request.\\n    /// @param _relayerContract The address of the relayer contract to add/remove items directly.\\n    /// @param _listMetadata Stringified JSON object containing list metadata (title, description, isListOfLists, etc.). Example at :-  https://cloudflare-ipfs.com/ipfs/QmekLsbXtQfm2jJjdeC5TF1cJcr5qxarZ9bhKmCS9s3ebK/list-metadata.json\\n    function initialize(\\n        address _governor,\\n        IArbitratorV2 _arbitrator,\\n        bytes calldata _arbitratorExtraData,\\n        EvidenceModule _evidenceModule,\\n        address _connectedList,\\n        TemplateRegistryParams calldata _templateRegistryParams,\\n        uint256[4] calldata _baseDeposits,\\n        uint256 _challengePeriodDuration,\\n        address _relayerContract,\\n        string calldata _listMetadata\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n        initialized = true;\\n\\n        governor = _governor;\\n        submissionBaseDeposit = _baseDeposits[0];\\n        removalBaseDeposit = _baseDeposits[1];\\n        submissionChallengeBaseDeposit = _baseDeposits[2];\\n        removalChallengeBaseDeposit = _baseDeposits[3];\\n        challengePeriodDuration = _challengePeriodDuration;\\n        relayerContract = _relayerContract;\\n\\n        templateRegistry = IDisputeTemplateRegistry(_templateRegistryParams.templateRegistry);\\n        templateIdRegistration = templateRegistry.setDisputeTemplate(\\n            \\\"Registration\\\",\\n            _templateRegistryParams.registrationTemplateParameters[0],\\n            _templateRegistryParams.registrationTemplateParameters[1]\\n        );\\n        templateIdRemoval = templateRegistry.setDisputeTemplate(\\n            \\\"Removal\\\",\\n            _templateRegistryParams.removalTemplateParameters[0],\\n            _templateRegistryParams.removalTemplateParameters[1]\\n        );\\n\\n        arbitrationParamsChanges.push(\\n            ArbitrationParams({\\n                arbitrator: _arbitrator,\\n                arbitratorExtraData: _arbitratorExtraData,\\n                evidenceModule: _evidenceModule\\n            })\\n        );\\n\\n        if (_connectedList != address(0)) {\\n            emit ConnectedListSet(_connectedList);\\n        }\\n\\n        emit ListMetadataSet(_listMetadata);\\n    }\\n\\n    // ************************************* //\\n    // *             Governance            * //\\n    // ************************************* //\\n\\n    /// @dev Change the duration of the challenge period.\\n    /// @param _challengePeriodDuration The new duration of the challenge period.\\n    function changeChallengePeriodDuration(uint256 _challengePeriodDuration) external onlyGovernor {\\n        challengePeriodDuration = _challengePeriodDuration;\\n    }\\n\\n    /// @dev Change the base amount required as a deposit to submit an item.\\n    /// @param _submissionBaseDeposit The new base amount of wei required to submit an item.\\n    function changeSubmissionBaseDeposit(uint256 _submissionBaseDeposit) external onlyGovernor {\\n        submissionBaseDeposit = _submissionBaseDeposit;\\n    }\\n\\n    /// @dev Change the base amount required as a deposit to remove an item.\\n    /// @param _removalBaseDeposit The new base amount of wei required to remove an item.\\n    function changeRemovalBaseDeposit(uint256 _removalBaseDeposit) external onlyGovernor {\\n        removalBaseDeposit = _removalBaseDeposit;\\n    }\\n\\n    /// @dev Change the base amount required as a deposit to challenge a submission.\\n    /// @param _submissionChallengeBaseDeposit The new base amount of wei required to challenge a submission.\\n    function changeSubmissionChallengeBaseDeposit(uint256 _submissionChallengeBaseDeposit) external onlyGovernor {\\n        submissionChallengeBaseDeposit = _submissionChallengeBaseDeposit;\\n    }\\n\\n    /// @dev Change the base amount required as a deposit to challenge a removal request.\\n    /// @param _removalChallengeBaseDeposit The new base amount of wei required to challenge a removal request.\\n    function changeRemovalChallengeBaseDeposit(uint256 _removalChallengeBaseDeposit) external onlyGovernor {\\n        removalChallengeBaseDeposit = _removalChallengeBaseDeposit;\\n    }\\n\\n    /// @dev Change the governor of the curated registry.\\n    /// @param _governor The address of the new governor.\\n    function changeGovernor(address _governor) external onlyGovernor {\\n        governor = _governor;\\n    }\\n\\n    /// @dev Change the address of connectedList, the Curate instance that stores addresses of Curate contracts related to this one.\\n    /// @param _connectedList The address of the connectedList contract to use.\\n    function changeConnectedList(address _connectedList) external onlyGovernor {\\n        emit ConnectedListSet(_connectedList);\\n    }\\n\\n    /// @dev Update list metadata ipfs uri.\\n    /// @param _listMetadata Ipfs uri to list metadata\\n    function changeListMetadata(string calldata _listMetadata) external onlyGovernor {\\n        emit ListMetadataSet(_listMetadata);\\n    }\\n\\n    /// @dev Change the address of the relay contract.\\n    /// @param _relayerContract The new address of the relay contract.\\n    function changeRelayerContract(address _relayerContract) external onlyGovernor {\\n        relayerContract = _relayerContract;\\n    }\\n\\n    /// @dev Changes the address of Template Registry contract.\\n    /// @param _templateRegistry The new template registry.\\n    function changeTemplateRegistry(IDisputeTemplateRegistry _templateRegistry) external onlyGovernor {\\n        templateRegistry = _templateRegistry;\\n        // TODO: automatically set templates upon changing the registry.\\n    }\\n\\n    /// @dev Changes the dispute template for registration requests.\\n    /// @param _templateData The new template data for registration requests.\\n    /// @param _templateDataMappings The new data mappings json for registration requests.\\n    function changeRegistrationDisputeTemplate(\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external onlyGovernor {\\n        templateIdRegistration = templateRegistry.setDisputeTemplate(\\n            \\\"Registration\\\",\\n            _templateData,\\n            _templateDataMappings\\n        );\\n    }\\n\\n    /// @dev Changes the dispute template for removal requests.\\n    /// @param _templateData The new template data for removal requests.\\n    /// @param _templateDataMappings The new data mappings json for removal requests.\\n    function changeRemovalDisputeTemplate(\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external onlyGovernor {\\n        templateIdRemoval = templateRegistry.setDisputeTemplate(\\\"Removal\\\", _templateData, _templateDataMappings);\\n    }\\n\\n    /// @notice Changes the params related to arbitration.\\n    /// @param _arbitrator Arbitrator to resolve potential disputes. The arbitrator is trusted to support appeal periods and not reenter.\\n    /// @param _arbitratorExtraData Extra data for the trusted arbitrator contract.\\n    /// @param _evidenceModule The evidence module for the arbitrator.\\n    function changeArbitrationParams(\\n        IArbitratorV2 _arbitrator,\\n        bytes calldata _arbitratorExtraData,\\n        EvidenceModule _evidenceModule\\n    ) external onlyGovernor {\\n        arbitrationParamsChanges.push(\\n            ArbitrationParams({\\n                arbitrator: _arbitrator,\\n                arbitratorExtraData: _arbitratorExtraData,\\n                evidenceModule: _evidenceModule\\n            })\\n        );\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Directly add an item to the list bypassing request-challenge. Can only be used by the relayer contract.\\n    /// @param _item Stringified JSON Object containing Item data\\n    function addItemDirectly(string calldata _item) external onlyRelayer {\\n        bytes32 itemID = keccak256(abi.encodePacked(_item));\\n        Item storage item = items[itemID];\\n        require(item.status == Status.Absent, \\\"Item must be absent to be added.\\\");\\n\\n        // Note that if the item is added directly once, the next time it is added it will emit this event again.\\n        if (item.requestCount == 0) {\\n            emit NewItem(itemID, _item, true);\\n        }\\n\\n        item.status = Status.Registered;\\n\\n        emit ItemStatusChange(itemID, true);\\n    }\\n\\n    /// @dev Directly remove an item from the list bypassing request-challenge. Can only be used by the relayer contract.\\n    /// @param _itemID The ID of the item to remove. Example at :- https://cloudflare-ipfs.com/ipfs/QmTypFX9416z5V87Fsnf6A89rrskh2X8BSVdaKhwzXNiDb/item.json\\n    function removeItemDirectly(bytes32 _itemID) external onlyRelayer {\\n        Item storage item = items[_itemID];\\n        require(item.status == Status.Registered, \\\"Item must be registered to be removed.\\\");\\n\\n        item.status = Status.Absent;\\n\\n        emit ItemStatusChange(_itemID, true);\\n    }\\n\\n    /// @dev Submit a request to register an item. Accepts enough ETH to cover the deposit, reimburses the rest.\\n    /// @param _item Stringified JSON object containing item data. Example at :- https://cloudflare-ipfs.com/ipfs/QmTypFX9416z5V87Fsnf6A89rrskh2X8BSVdaKhwzXNiDb/item.json\\n    function addItem(string calldata _item) external payable {\\n        bytes32 itemID = keccak256(abi.encodePacked(_item));\\n        Item storage item = items[itemID];\\n\\n        require(item.status == Status.Absent, \\\"Item must be absent to be added.\\\");\\n\\n        // Note that if the item was added previously using `addItemDirectly`, the event will be emitted again here.\\n        if (item.requestCount == 0) {\\n            emit NewItem(itemID, _item, false);\\n        }\\n\\n        Request storage request = item.requests[item.requestCount++];\\n        uint256 arbitrationParamsIndex = arbitrationParamsChanges.length - 1;\\n        IArbitratorV2 arbitrator = arbitrationParamsChanges[arbitrationParamsIndex].arbitrator;\\n        bytes storage arbitratorExtraData = arbitrationParamsChanges[arbitrationParamsIndex].arbitratorExtraData;\\n\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n        uint256 totalCost = arbitrationCost + submissionBaseDeposit;\\n        require(msg.value >= totalCost, \\\"You must fully fund the request.\\\");\\n\\n        item.sumDeposit = totalCost;\\n        item.status = Status.RegistrationRequested;\\n\\n        request.requestType = RequestType.Registration;\\n        request.submissionTime = uint64(block.timestamp);\\n        request.arbitrationParamsIndex = uint24(arbitrationParamsIndex);\\n        request.requester = payable(msg.sender);\\n\\n        emit RequestSubmitted(itemID, getRequestID(itemID, item.requestCount - 1));\\n\\n        if (msg.value > totalCost) {\\n            payable(msg.sender).send(msg.value - totalCost);\\n        }\\n    }\\n\\n    /// @dev Submit a request to remove an item from the list. Accepts enough ETH to cover the deposit, reimburses the rest.\\n    /// @param _itemID The ID of the item to remove.\\n    /// @param _evidence Stringified evidence object, example: '{\\\"name\\\" : \\\"Justification\\\", \\\"description\\\" : \\\"Description\\\", \\\"fileURI\\\" : \\\"/ipfs/QmWQV5ZFFhEJiW8Lm7ay2zLxC2XS4wx1b2W7FfdrLMyQQc\\\"}'.\\n    function removeItem(bytes32 _itemID, string calldata _evidence) external payable {\\n        Item storage item = items[_itemID];\\n\\n        require(item.status == Status.Registered, \\\"Item must be registered to be removed.\\\");\\n\\n        Request storage request = item.requests[item.requestCount++];\\n        uint256 arbitrationParamsIndex = arbitrationParamsChanges.length - 1;\\n        ArbitrationParams storage arbitrationParams = arbitrationParamsChanges[arbitrationParamsIndex];\\n        IArbitratorV2 arbitrator = arbitrationParams.arbitrator;\\n\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitrationParams.arbitratorExtraData);\\n        uint256 totalCost = arbitrationCost + removalBaseDeposit;\\n        require(msg.value >= totalCost, \\\"You must fully fund the request.\\\");\\n\\n        item.sumDeposit = totalCost;\\n        item.status = Status.ClearingRequested;\\n\\n        request.submissionTime = uint64(block.timestamp);\\n        request.arbitrationParamsIndex = uint24(arbitrationParamsIndex);\\n        request.requester = payable(msg.sender);\\n        request.requestType = RequestType.Clearing;\\n\\n        uint256 requestID = getRequestID(_itemID, item.requestCount - 1);\\n        emit RequestSubmitted(_itemID, requestID);\\n\\n        // Emit evidence if it was provided.\\n        if (bytes(_evidence).length > 0) {\\n            arbitrationParams.evidenceModule.submitEvidence(requestID, _evidence); // TODO: add a msg.sender parameter to submitEvidence.\\n        }\\n\\n        if (msg.value > totalCost) {\\n            payable(msg.sender).send(msg.value - totalCost);\\n        }\\n    }\\n\\n    /// @dev Challenges the request of the item. Accepts enough ETH to cover the deposit, reimburses the rest.\\n    /// @param _itemID The ID of the item which request to challenge.\\n    /// @param _evidence Stringified evidence object, example: '{\\\"name\\\" : \\\"Justification\\\", \\\"description\\\" : \\\"Description\\\", \\\"fileURI\\\" : \\\"/ipfs/QmWQV5ZFFhEJiW8Lm7ay2zLxC2XS4wx1b2W7FfdrLMyQQc\\\"}'.\\n    function challengeRequest(bytes32 _itemID, string calldata _evidence) external payable {\\n        Item storage item = items[_itemID];\\n        require(item.status > Status.Registered, \\\"The item must have a pending request.\\\");\\n\\n        uint256 lastRequestIndex = item.requestCount - 1;\\n        Request storage request = item.requests[lastRequestIndex];\\n        require(\\n            block.timestamp - request.submissionTime <= challengePeriodDuration,\\n            \\\"Challenges must occur during the challenge period.\\\"\\n        );\\n\\n        DisputeData storage disputeData = requestsDisputeData[_itemID][lastRequestIndex];\\n        require(disputeData.status == DisputeStatus.None, \\\"The request should not have already been disputed.\\\");\\n\\n        ArbitrationParams storage arbitrationParams = arbitrationParamsChanges[request.arbitrationParamsIndex];\\n        IArbitratorV2 arbitrator = arbitrationParams.arbitrator;\\n\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitrationParams.arbitratorExtraData);\\n        uint256 totalCost;\\n        {\\n            uint256 challengerBaseDeposit = item.status == Status.RegistrationRequested\\n                ? submissionChallengeBaseDeposit\\n                : removalChallengeBaseDeposit;\\n            totalCost = arbitrationCost + challengerBaseDeposit;\\n        }\\n        require(msg.value >= totalCost, \\\"You must fully fund the challenge.\\\");\\n\\n        item.sumDeposit = item.sumDeposit + totalCost - arbitrationCost;\\n\\n        request.challenger = payable(msg.sender);\\n\\n        // Raise a dispute.\\n        disputeData.disputeID = arbitrator.createDispute{value: arbitrationCost}(\\n            RULING_OPTIONS,\\n            arbitrationParams.arbitratorExtraData\\n        );\\n        disputeData.status = DisputeStatus.AwaitingRuling;\\n\\n        arbitratorDisputeIDToItemID[address(arbitrator)][disputeData.disputeID] = _itemID;\\n\\n        uint256 requestID = getRequestID(_itemID, lastRequestIndex);\\n        uint256 templateId = request.requestType == RequestType.Registration\\n            ? templateIdRegistration\\n            : templateIdRemoval;\\n        emit DisputeRequest(arbitrator, disputeData.disputeID, requestID, templateId, \\\"\\\");\\n\\n        // Emit evidence if it was provided.\\n        if (bytes(_evidence).length > 0) {\\n            arbitrationParams.evidenceModule.submitEvidence(requestID, _evidence); // TODO: add a msg.sender parameter to submitEvidence.\\n        }\\n\\n        if (msg.value > totalCost) {\\n            payable(msg.sender).send(msg.value - totalCost);\\n        }\\n    }\\n\\n    /// @dev Executes an unchallenged request if the challenge period has passed.\\n    /// @param _itemID The ID of the item to execute.\\n    function executeRequest(bytes32 _itemID) external {\\n        Item storage item = items[_itemID];\\n        uint256 lastRequestIndex = items[_itemID].requestCount - 1;\\n\\n        Request storage request = item.requests[lastRequestIndex];\\n        require(\\n            block.timestamp - request.submissionTime > challengePeriodDuration,\\n            \\\"Time to challenge the request must pass.\\\"\\n        );\\n\\n        DisputeData storage disputeData = requestsDisputeData[_itemID][lastRequestIndex];\\n        require(disputeData.status == DisputeStatus.None, \\\"The request should not be disputed.\\\");\\n\\n        if (item.status == Status.RegistrationRequested) {\\n            item.status = Status.Registered;\\n        } else if (item.status == Status.ClearingRequested) {\\n            item.status = Status.Absent;\\n        } else {\\n            revert(\\\"There must be a request.\\\");\\n        }\\n\\n        emit ItemStatusChange(_itemID, false);\\n\\n        uint256 sumDeposit = item.sumDeposit;\\n        item.sumDeposit = 0;\\n\\n        if (sumDeposit > 0) {\\n            // reimburse the requester\\n            request.requester.send(sumDeposit);\\n        }\\n    }\\n\\n    /// @dev Give a ruling for a dispute. Can only be called by the arbitrator. TRUSTED.\\n    /// @param _disputeID ID of the dispute in the arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refused to arbitrate\\\".\\n    function rule(uint256 _disputeID, uint256 _ruling) external {\\n        require(_ruling <= RULING_OPTIONS, \\\"Invalid ruling option\\\");\\n\\n        bytes32 itemID = arbitratorDisputeIDToItemID[msg.sender][_disputeID];\\n        Item storage item = items[itemID];\\n        uint256 lastRequestIndex = items[itemID].requestCount - 1;\\n        Request storage request = item.requests[lastRequestIndex];\\n\\n        DisputeData storage disputeData = requestsDisputeData[itemID][lastRequestIndex];\\n        require(disputeData.status == DisputeStatus.AwaitingRuling, \\\"The request must not be resolved.\\\");\\n\\n        ArbitrationParams storage arbitrationParams = arbitrationParamsChanges[request.arbitrationParamsIndex];\\n        require(address(arbitrationParams.arbitrator) == msg.sender, \\\"Only the arbitrator can give a ruling\\\");\\n\\n        emit Ruling(IArbitratorV2(msg.sender), _disputeID, _ruling);\\n\\n        Party winner = Party(_ruling);\\n\\n        disputeData.status = DisputeStatus.Resolved;\\n        disputeData.ruling = winner;\\n\\n        uint256 sumDeposit = item.sumDeposit;\\n        item.sumDeposit = 0;\\n\\n        if (winner == Party.None) {\\n            // If the arbitrator refuse to rule, then the item status should be the same it was before the request.\\n            // Regarding item.status this is equivalent to the challenger winning the dispute.\\n            item.status = item.status == Status.RegistrationRequested ? Status.Absent : Status.Registered;\\n\\n            // Since nobody has won, then we reimburse both parties equally.\\n            // If item.sumDeposit is odd, 1 wei will remain in the contract balance.\\n            uint256 halfSumDeposit = sumDeposit / 2;\\n\\n            request.requester.send(halfSumDeposit);\\n            request.challenger.send(halfSumDeposit);\\n        } else if (winner == Party.Requester) {\\n            item.status = item.status == Status.RegistrationRequested ? Status.Registered : Status.Absent;\\n\\n            request.requester.send(sumDeposit);\\n        } else {\\n            item.status = item.status == Status.RegistrationRequested ? Status.Absent : Status.Registered;\\n\\n            request.challenger.send(sumDeposit);\\n        }\\n\\n        emit ItemStatusChange(itemID, false);\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @notice Gets the local dispute ID for a given item and request.\\n    /// @param _itemID The ID of the item.\\n    /// @param _requestID The ID of the request.\\n    /// @return Local dispute ID.\\n    function getRequestID(bytes32 _itemID, uint256 _requestID) public pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_itemID, _requestID)));\\n    }\\n\\n    /// @notice Gets the arbitrator for new requests.\\n    /// @dev Gets the latest value in arbitrationParamsChanges.\\n    /// @return The arbitrator address.\\n    function getArbitrator() external view returns (IArbitratorV2) {\\n        return arbitrationParamsChanges[arbitrationParamsChanges.length - 1].arbitrator;\\n    }\\n\\n    /// @notice Gets the arbitratorExtraData for new requests.\\n    /// @dev Gets the latest value in arbitrationParamsChanges.\\n    /// @return The arbitrator extra data.\\n    function getArbitratorExtraData() external view returns (bytes memory) {\\n        return arbitrationParamsChanges[arbitrationParamsChanges.length - 1].arbitratorExtraData;\\n    }\\n\\n    /// @dev Returns item's information. Includes the total number of requests for the item\\n    /// @param _itemID The ID of the queried item.\\n    /// @return status The current status of the item.\\n    /// @return numberOfRequests Total number of requests for the item.\\n    /// @return sumDeposit The total deposit made by the requester and the challenger (if any)\\n    function getItemInfo(\\n        bytes32 _itemID\\n    ) external view returns (Status status, uint256 numberOfRequests, uint256 sumDeposit) {\\n        Item storage item = items[_itemID];\\n        return (item.status, item.requestCount, item.sumDeposit);\\n    }\\n\\n    /// @dev Gets information on a request made for the item.\\n    /// @param _itemID The ID of the queried item.\\n    /// @param _requestID The request to be queried.\\n    /// @return disputed True if a dispute was raised.\\n    /// @return disputeID ID of the dispute, if any.\\n    /// @return submissionTime Time when the request was made.\\n    /// @return resolved True if the request was executed and/or any raised disputes were resolved.\\n    /// @return parties Address of requester and challenger, if any.\\n    /// @return ruling The final ruling given, if any.\\n    /// @return requestArbitrator The arbitrator trusted to solve disputes for this request.\\n    /// @return requestArbitratorExtraData The extra data for the trusted arbitrator of this request.\\n    function getRequestInfo(\\n        bytes32 _itemID,\\n        uint256 _requestID\\n    )\\n        external\\n        view\\n        returns (\\n            bool disputed,\\n            uint256 disputeID,\\n            uint256 submissionTime,\\n            bool resolved,\\n            address payable[3] memory parties,\\n            Party ruling,\\n            IArbitratorV2 requestArbitrator,\\n            bytes memory requestArbitratorExtraData\\n        )\\n    {\\n        Item storage item = items[_itemID];\\n        require(item.requestCount > _requestID, \\\"Request does not exist.\\\");\\n\\n        Request storage request = items[_itemID].requests[_requestID];\\n\\n        submissionTime = request.submissionTime;\\n        parties[uint256(Party.Requester)] = request.requester;\\n        parties[uint256(Party.Challenger)] = request.challenger;\\n\\n        (disputed, disputeID, ruling) = getRequestDisputeData(_itemID, _requestID);\\n\\n        (requestArbitrator, requestArbitratorExtraData) = getRequestArbitrationParams(_itemID, _requestID);\\n        resolved = getRequestResolvedStatus(_itemID, _requestID);\\n    }\\n\\n    /// @dev Gets the dispute data relative to a given item request.\\n    /// @param _itemID The ID of the queried item.\\n    /// @param _requestID The request to be queried.\\n    /// @return disputed True if a dispute was raised.\\n    /// @return disputeID ID of the dispute, if any.\\n    /// @return ruling The final ruling given, if any.\\n    function getRequestDisputeData(\\n        bytes32 _itemID,\\n        uint256 _requestID\\n    ) internal view returns (bool disputed, uint256 disputeID, Party ruling) {\\n        DisputeData storage disputeData = requestsDisputeData[_itemID][_requestID];\\n\\n        return (disputeData.status >= DisputeStatus.AwaitingRuling, disputeData.disputeID, disputeData.ruling);\\n    }\\n\\n    /// @dev Gets the arbitration params relative to a given item request.\\n    /// @param _itemID The ID of the queried item.\\n    /// @param _requestID The request to be queried.\\n    /// @return arbitrator The arbitrator trusted to solve disputes for this request.\\n    /// @return arbitratorExtraData The extra data for the trusted arbitrator of this request.\\n    function getRequestArbitrationParams(\\n        bytes32 _itemID,\\n        uint256 _requestID\\n    ) internal view returns (IArbitratorV2 arbitrator, bytes memory arbitratorExtraData) {\\n        Request storage request = items[_itemID].requests[_requestID];\\n        ArbitrationParams storage arbitrationParams = arbitrationParamsChanges[request.arbitrationParamsIndex];\\n\\n        return (arbitrationParams.arbitrator, arbitrationParams.arbitratorExtraData);\\n    }\\n\\n    /// @dev Gets the resovled status of a given item request.\\n    /// @param _itemID The ID of the queried item.\\n    /// @param _requestID The request to be queried.\\n    /// @return resolved True if the request was executed and/or any raised disputes were resolved.\\n    function getRequestResolvedStatus(bytes32 _itemID, uint256 _requestID) internal view returns (bool resolved) {\\n        Item storage item = items[_itemID];\\n\\n        if (item.requestCount == 0) {\\n            return false;\\n        }\\n\\n        if (_requestID < item.requestCount - 1) {\\n            // It was resolved because it is not the last request.\\n            return true;\\n        }\\n\\n        return item.sumDeposit == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x211ef2de660f69b273898c15fb693cee468fc134354c07545aea6eec2560e709\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161087c38038061087c83398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6107e9806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780630f9373ad14610067578063a2f7b3a514610092578063a63b115b146100a5575b600080fd5b6000546040519081526020015b60405180910390f35b60015461007a906001600160a01b031681565b6040516001600160a01b03909116815260200161005e565b61007a6100a03660046102f4565b6100ba565b6100b86100b336600461044b565b6100e4565b005b600081815481106100ca57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546000906100fc906001600160a01b0316610256565b9050806001600160a01b03166325b98b838d8d8d8d8d8d60405180606001604052808f60000160208101906101319190610550565b6001600160a01b031681526020018f806020019061014f9190610574565b61015890610594565b81526020018f806040019061016d9190610574565b61017690610594565b8152508d8d8d8d6040518c63ffffffff1660e01b81526004016101a39b9a999897969594939291906106ed565b600060405180830381600087803b1580156101bd57600080fd5b505af11580156101d1573d6000803e3d6000fd5b5050600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0386169081179091556040519093507f425208e08bf94a09380d60ae4ba2c26cdf95fb1e9e6a0e3e284b99a5f27bde7f9250a2505050505050505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166102ef5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b60006020828403121561030657600080fd5b5035919050565b6001600160a01b038116811461032257600080fd5b50565b80356102ef8161030d565b60008083601f84011261034257600080fd5b50813567ffffffffffffffff81111561035a57600080fd5b60208301915083602082850101111561037257600080fd5b9250929050565b60006060828403121561038b57600080fd5b50919050565b80608081018310156103a257600080fd5b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126103cf57600080fd5b813567ffffffffffffffff808211156103ea576103ea6103a8565b604051601f8301601f19908116603f01168101908282118183101715610412576104126103a8565b8160405283815286602085880101111561042b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060008060008060006101a08c8e03121561046d57600080fd5b6104768c610325565b9a5061048460208d01610325565b995067ffffffffffffffff8060408e013511156104a057600080fd5b6104b08e60408f01358f01610330565b909a5098506104c160608e01610325565b97506104cf60808e01610325565b96508060a08e013511156104e257600080fd5b6104f28e60a08f01358f01610379565b95506105018e60c08f01610391565b94506101408d013593506105186101608e01610325565b9250806101808e0135111561052c57600080fd5b5061053e8d6101808e01358e016103be565b90509295989b509295989b9093969950565b60006020828403121561056257600080fd5b813561056d8161030d565b9392505050565b60008235603e1983360301811261058a57600080fd5b9190910192915050565b60006040516040810167ffffffffffffffff82821081831117156105ba576105ba6103a8565b604091825282918501368111156105d057600080fd5b855b81811015610605578035838111156105ea5760008081fd5b6105f636828a016103be565b855250602093840193016105d2565b509295945050505050565b6000815180845260005b818110156106365760208185018101518683018201520161061a565b506000602082860101526020601f19601f83011685010191505092915050565b600082604081018360005b600281101561069057838303875261067a838351610610565b6020978801979093509190910190600101610661565b509095945050505050565b60018060a01b03815116825260006020820151606060208501526106c26060850182610656565b9050604083015184820360408601526106db8282610656565b95945050505050565b60808183375050565b6001600160a01b038c811682528b1660208201526101a060408201819052810189905260006101c08a8c8285013760008b84018201526001600160a01b038a166060840152601f19601f8c011683016001600160a01b038a166080850152818482030160a08501526107618282018a61069b565b91505061077160c08401886106e4565b8561014084015261078e6101608401866001600160a01b03169052565b8281036101808401526107a18185610610565b9e9d505050505050505050505050505056fea26469706673582212205cbfacd8b077ce163eae9cb489744d00fd679b2af08ca31db79cda945ef9f6b964736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780630f9373ad14610067578063a2f7b3a514610092578063a63b115b146100a5575b600080fd5b6000546040519081526020015b60405180910390f35b60015461007a906001600160a01b031681565b6040516001600160a01b03909116815260200161005e565b61007a6100a03660046102f4565b6100ba565b6100b86100b336600461044b565b6100e4565b005b600081815481106100ca57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546000906100fc906001600160a01b0316610256565b9050806001600160a01b03166325b98b838d8d8d8d8d8d60405180606001604052808f60000160208101906101319190610550565b6001600160a01b031681526020018f806020019061014f9190610574565b61015890610594565b81526020018f806040019061016d9190610574565b61017690610594565b8152508d8d8d8d6040518c63ffffffff1660e01b81526004016101a39b9a999897969594939291906106ed565b600060405180830381600087803b1580156101bd57600080fd5b505af11580156101d1573d6000803e3d6000fd5b5050600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0386169081179091556040519093507f425208e08bf94a09380d60ae4ba2c26cdf95fb1e9e6a0e3e284b99a5f27bde7f9250a2505050505050505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166102ef5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b60006020828403121561030657600080fd5b5035919050565b6001600160a01b038116811461032257600080fd5b50565b80356102ef8161030d565b60008083601f84011261034257600080fd5b50813567ffffffffffffffff81111561035a57600080fd5b60208301915083602082850101111561037257600080fd5b9250929050565b60006060828403121561038b57600080fd5b50919050565b80608081018310156103a257600080fd5b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126103cf57600080fd5b813567ffffffffffffffff808211156103ea576103ea6103a8565b604051601f8301601f19908116603f01168101908282118183101715610412576104126103a8565b8160405283815286602085880101111561042b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060008060008060006101a08c8e03121561046d57600080fd5b6104768c610325565b9a5061048460208d01610325565b995067ffffffffffffffff8060408e013511156104a057600080fd5b6104b08e60408f01358f01610330565b909a5098506104c160608e01610325565b97506104cf60808e01610325565b96508060a08e013511156104e257600080fd5b6104f28e60a08f01358f01610379565b95506105018e60c08f01610391565b94506101408d013593506105186101608e01610325565b9250806101808e0135111561052c57600080fd5b5061053e8d6101808e01358e016103be565b90509295989b509295989b9093969950565b60006020828403121561056257600080fd5b813561056d8161030d565b9392505050565b60008235603e1983360301811261058a57600080fd5b9190910192915050565b60006040516040810167ffffffffffffffff82821081831117156105ba576105ba6103a8565b604091825282918501368111156105d057600080fd5b855b81811015610605578035838111156105ea5760008081fd5b6105f636828a016103be565b855250602093840193016105d2565b509295945050505050565b6000815180845260005b818110156106365760208185018101518683018201520161061a565b506000602082860101526020601f19601f83011685010191505092915050565b600082604081018360005b600281101561069057838303875261067a838351610610565b6020978801979093509190910190600101610661565b509095945050505050565b60018060a01b03815116825260006020820151606060208501526106c26060850182610656565b9050604083015184820360408601526106db8282610656565b95945050505050565b60808183375050565b6001600160a01b038c811682528b1660208201526101a060408201819052810189905260006101c08a8c8285013760008b84018201526001600160a01b038a166060840152601f19601f8c011683016001600160a01b038a166080850152818482030160a08501526107618282018a61069b565b91505061077160c08401886106e4565b8561014084015261078e6101608401866001600160a01b03169052565b8281036101808401526107a18185610610565b9e9d505050505050505050505050505056fea26469706673582212205cbfacd8b077ce163eae9cb489744d00fd679b2af08ca31db79cda945ef9f6b964736f6c63430008180033",
  "devdoc": {
    "events": {
      "NewList(address)": {
        "details": "Emitted when a new Curate contract is deployed using this factory.",
        "params": {
          "_address": "The address of the newly deployed Curate contract."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_curate": "Address of the Curate contract that is going to be used for each new deployment."
        }
      },
      "count()": {
        "returns": {
          "_0": "The number of deployed Curate contracts using this factory."
        }
      },
      "deploy(address,address,bytes,address,address,(address,string[2],string[2]),uint256[4],uint256,address,string)": {
        "details": "Deploy the arbitrable curated registry.",
        "params": {
          "_arbitrator": "Arbitrator to resolve potential disputes. The arbitrator is trusted to support appeal periods and not reenter.",
          "_arbitratorExtraData": "Extra data for the trusted arbitrator contract.",
          "_baseDeposits": "The base deposits for requests/challenges as follows: - The base deposit to submit an item. - The base deposit to remove an item. - The base deposit to challenge a submission. - The base deposit to challenge a removal request.",
          "_challengePeriodDuration": "The time in seconds parties have to challenge a request.",
          "_connectedList": "The address of the Curate contract that stores related Curate addresses. This parameter can be left empty.",
          "_evidenceModule": "The evidence contract for the arbitrator.",
          "_governor": "The trusted governor of this contract.",
          "_listMetadata": "Stringified JSON object containing list metadata (title, description, isListOfLists, etc.). Example at :-  https://cloudflare-ipfs.com/ipfs/QmekLsbXtQfm2jJjdeC5TF1cJcr5qxarZ9bhKmCS9s3ebK/list-metadata.json",
          "_relayerContract": "The address of the relay contract to add/remove items directly.",
          "_templateRegistryParams": "The dispute template registry. - templateRegistry : The dispute template registry. - registrationTemplateParameters : Template and data mappings json for registration requests. - removalTemplateParameters : Template and data mappings json for removal requests."
        }
      }
    },
    "title": "CurateFactory This contract acts as a registry for Curate instances.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 758,
        "contract": "src/CurateFactory.sol:CurateFactory",
        "label": "instances",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(CurateV2)2734)dyn_storage"
      },
      {
        "astId": 760,
        "contract": "src/CurateFactory.sol:CurateFactory",
        "label": "curate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(CurateV2)2734)dyn_storage": {
        "base": "t_contract(CurateV2)2734",
        "encoding": "dynamic_array",
        "label": "contract CurateV2[]",
        "numberOfBytes": "32"
      },
      "t_contract(CurateV2)2734": {
        "encoding": "inplace",
        "label": "contract CurateV2",
        "numberOfBytes": "20"
      }
    }
  }
}
